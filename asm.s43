#include "msp430.h"                     ; #define controlled include file

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label
       

        RSEG    CSTACK                  ; pre-declaration of segment
        
        RSEG    DATA16_HEAP
        RSEG    DATA16_N
       
standby         DW     100b        
playback        DW     010b
record          DW     001b
        
        RSEG    CODE                    ; place program in 'CODE' segment
       
     
init:   MOV     #SFE(CSTACK), SP        ; set up stack
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer

        BIS.B   #00000111b, &P1DIR      ; Set P1.(0-2) to outputs to the RGB
                                        ; and P1.(3-7) as inputs from 5
                                        ; 5-position mode switch
      
    
        MOV.B   #00000000b, &P1OUT
        
        BIC.W #CCIE,&TACCTL0
        mov.w #8000,&TACCR0                   ; Setup count value
        mov.w #TASSEL_1+MC_1,&TACTL           ; choose ACLK, count up mode 
        
        BIS.B #01010000b, &P1IE               ; Interrupt on Input Pin 1.1
        BIS.B #01010000b, &P1IES              ; High To Low Edge
        BIC.B #01010000b, &P1IFG              ; Set Interrupt Flag off
        BIS.W #GIE, SR                        ; Enable Interrupts
                                        
SetLED MACRO mode
        BIC.B #00000111b, &P1OUT
        BIS.B mode, &P1OUT
        MOV.B mode, R4
        ENDM 
        
             
      
main:   NOP                             ; main program
        
        
       
       
        MOV.B standby, R4
        SetLED R4
        
        JMP $                                 ; jump to current location '$'
 
                                              ; (endless loop)
      
;-------------------------------------------------------------------------------
;    5-Way Position Switch Handler
;    Note: For the purpose of breadboard layout,
;          all directions corresponding to the button
;          are rotated clockwise, ie:
;          "Right" on the button is physically DOWN
;          "Left" on the button is physically UP
;          "Down" on the button is physically RIGHT
;          "Up" on the button is physically LEFT
;-------------------------------------------------------------------------------
P1_ISR:      
     BIC.B   #01010000b, &P1IE
     mov.w #CCIE,&TACCTL0                        ; TACCR0 interrupt enabled
     
     DirectionSwitch_begin:
        
        BIC.B #111b, &P1IFG
        MOV.B P1IFG, R5
        
        CMP #01000000b, R5
        JNZ Left_end
  
        ; -------- Action: Set Mode ---------- ;
        Left:                           
           CMP #00000100b, R4                   ; Restrict Mode between 3 LSBits
           JZ DirectionSwitch_end
           
           RLC R4
           CLRC
           SetLED R4 
        
           JMP DirectionSwitch_end
        Left_end: 
        
        CMP #00010000b, R5
        JNZ Right_end
        
        Right:                                  ; Restrict Mode between 3 LSBits
           CMP #00000001b, R4
           JZ DirectionSwitch_end
           
           RRC R4
           CLRC
           SetLED R4 
           JMP DirectionSwitch_end
           
        Right_end: 
        
        ; --------------------------------- ;
        
       DirectionSwitch_end: 
     
     bic.b   #01010000b,&P1IFG            ; P1.3 IFG Cleared
     reti                                 ; Return from ISR  
                                     
                                     
; ---------- TIMER0_A0 ISR ------------- ;

TA0_ISR:
      
      BIC.W   CCIE, &TACCTL0
      MOV.B   #01010000b, &P1IE
      BIS.W #GIE, SR
      reti

;------------------------------------------------------------------------------
;           Interrupt Vectors
;------------------------------------------------------------------------------
     COMMON INTVEC                       ; Interrupt Vectors
     ORG PORT1_VECTOR                    ; PORT1 Vector
     DW P1_ISR                           ; define a word with value P1_ISR
     ORG TIMER0_A0_VECTOR
     DW TA0_ISR
     END
            
            
   